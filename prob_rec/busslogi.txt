-------------------------- 委托维护 ---------------
1.委托contract:
  delete:不允许删除条件
    a:  pre_fee中有此委托记录
    b:  此委托锁定 finish_flag=true
  update:禁止修改条件
    a:  pre_fee中有此委托记录禁止修改client_id
    b:  委托锁定禁止修改   finish_flag=true

2.委托动态contract_action：
  delete:   只能从最后一个动态开始删除。
  insert/update: 动态要求按照顺序增加，只有在   c_action  中的  require_flag  为false的情况下，
            可以跳过此action而插入下一个action。

------------------------委托应收付维护--------------
1.委托应收付费用维护：pre_fee
  insert:插入应付(fee_typ='O')费用时,处理代收代付费用。判断fee_cod在费用代码表c_fee中的pair_flag的值，
         true则自动插入相同金额的应收费用，插入前判断是否已存在此应收费用，已存在不再插入
  update:禁止修改条件
        a: 已锁定(lock_flag)或已核销(audit_id)
  delete：禁止删除条件
        a: 已核销(audit_id)
2.应收付费用锁定：
3.应收付费用解锁:已核销(audit_id)禁止解锁

-----------------------委托已收付维护---------------
1.委托
-------------------------- 已收核销 ------------

核销动作：
update act_fee set ex_over = '" + ls_seq + "', off_flag=true where id = " + str(i)
update pre_fee set ex_over = '" + ls_seq + "', lock_flag=true where id = " + str(i)
----- 如果省的是actfee，就插入actfee，否则prefee，
insert into act_fee/prefee  :  ex_from ls_seq,  ex_feeid : 'E'



------------------------------------- contract 触发器控制逻辑。
east ocean 16:19:34

CREATE OR REPLACE FUNCTION fun4tri_contract()
  RETURNS trigger AS
$BODY$
DECLARE
	count_fee integer;
BEGIN
	IF NEW.client_id <> OLD.client_id THEN
		SELECT count(*) INTO count_fee FROM pre_fee WHERE contract_id = OLD.id;
		IF count_fee > 0 THEN
			RAISE EXCEPTION '已有应付费用不能更改客户。';
		END IF;
	END IF;

	IF NEW.finish_flag = OLD.finish_flag AND NEW.finish_flag = true THEN
		RAISE EXCEPTION '已经锁定不能修改';
        END IF;

        NEW.upd_tim := current_timestamp;
        RETURN NEW;
    END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION fun4tri_contract()
  OWNER TO "yardAdmin";

CREATE TRIGGER tri_contract
  BEFORE UPDATE
  ON contract
  FOR EACH ROW
  EXECUTE PROCEDURE fun4tri_contract();

--------------------------------------  pre fee 触发器控制逻辑。
CREATE OR REPLACE FUNCTION fun4tri_pre_fee()
  RETURNS trigger AS
$BODY$
BEGIN

	IF NEW.lock_flag = true THEN
		RAISE EXCEPTION '已经锁定不能修改';
	ELSE
		IF NEW.audit_id = true and OLD.audit_id = true THEN
			RAISE EXCEPTION '已经核销不能修改';
		END IF;
        END IF;

        NEW.upd_tim := current_timestamp;
        RETURN NEW;
    END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION fun4tri_pre_fee()
  OWNER TO "yardAdmin";

CREATE TRIGGER tri_pre_fee
  BEFORE UPDATE
  ON pre_fee
  FOR EACH ROW
  EXECUTE PROCEDURE fun4tri_pre_fee();






